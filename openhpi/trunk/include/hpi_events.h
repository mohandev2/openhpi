/*
 * Copyright (c) 2003, Service Availability Forum
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or 
 * without modification, are permitted provided that the following 
 * conditions are met:
 *
 * Redistributions of source code must retain the above copyright 
 * notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright 
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Service Availalability Forum nor the names 
 * of its contributors may be used to endorse or promote products 
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */


/*******************************************************************************
********************************************************************************
********** 							      **********
********** Events, part 1 					      **********
********** 						              **********
********************************************************************************
*******************************************************************************/

#ifndef HPI_EVENTS_H
#define HPI_EVENTS_H

/*
** Category
**
** Sensor events contain an event category and event state. Depending on the
** event category, the event states take on different meanings for events
** generated by specific sensors.
**
** The SAHPI_EC_GENERIC category can be used for discrete sensors which have
** state meanings other than those identified with other event categories.
*/

typedef SaHpiUint8T SaHpiEventCategoryT;

#define SAHPI_EC_UNSPECIFIED (SaHpiEventCategoryT)0x00 /* Unspecified */
#define SAHPI_EC_THRESHOLD (SaHpiEventCategoryT)0x01 /* Threshold
						      * events */
#define SAHPI_EC_USAGE (SaHpiEventCategoryT)0x02 /* Usage state
						  * events */
#define SAHPI_EC_STATE (SaHpiEventCategoryT)0x03 /* Generic state
						  * events */
#define SAHPI_EC_PRED_FAIL (SaHpiEventCategoryT)0x04 /* Predictive fail
						      * events */
#define SAHPI_EC_LIMIT (SaHpiEventCategoryT)0x05 /* Limit events */
#define SAHPI_EC_PERFORMANCE (SaHpiEventCategoryT)0x06 /* Performance
							* events */
#define SAHPI_EC_SEVERITY (SaHpiEventCategoryT)0x07 /* Severity
						     * indicating
						     * events */
#define SAHPI_EC_PRESENCE (SaHpiEventCategoryT)0x08 /* Device presence
						     * events */
#define SAHPI_EC_ENABLE (SaHpiEventCategoryT)0x09 /* Device enabled
					           * events */
#define SAHPI_EC_AVAILABILITY (SaHpiEventCategoryT)0x0A /* Availability
							 * state events */
#define SAHPI_EC_REDUNDANCY (SaHpiEventCategoryT)0x0B /* Redundancy
						       * state events */
#define SAHPI_EC_USER (SaHpiEventCategoryT)0x7E /* User defined
						 * events */
#define SAHPI_EC_GENERIC (SaHpiEventCategoryT)0x7F /* OEM defined
						    * events */

/*
** Event States
**
** The following event states are specified relative to the categories listed
** above. The event types are only valid for their given category. Each set of
** events is labeled as to which category it belongs to.
** Each event will have only one event state associated with it. When retrieving
** the event status or event enabled status a bit mask of all applicable event
** states is used. Similarly, when setting the event enabled status a bit mask
** of all applicable event states is used.
*/

typedef SaHpiUint16T SaHpiEventStateT;

/*
** SaHpiEventCategoryT == <any>
*/
#define SAHPI_ES_UNSPECIFIED (SaHpiEventStateT)0x0000

/*
** SaHpiEventCategoryT == SAHPI_EC_THRESHOLD
** When using these event states, the event state should match
** the event severity (for example SAHPI_ES_LOWER_MINOR should have an
** event severity of SAHPI_MINOR).
*/
#define SAHPI_ES_LOWER_MINOR (SaHpiEventStateT)0x0001
#define SAHPI_ES_LOWER_MAJOR (SaHpiEventStateT)0x0002
#define SAHPI_ES_LOWER_CRIT (SaHpiEventStateT)0x0004
#define SAHPI_ES_UPPER_MINOR (SaHpiEventStateT)0x0008
#define SAHPI_ES_UPPER_MAJOR (SaHpiEventStateT)0x0010
#define SAHPI_ES_UPPER_CRIT (SaHpiEventStateT)0x0020
/* SaHpiEventCategoryT == SAHPI_EC_USAGE */
#define SAHPI_ES_IDLE (SaHpiEventStateT)0x0001
#define SAHPI_ES_ACTIVE (SaHpiEventStateT)0x0002
#define SAHPI_ES_BUSY (SaHpiEventStateT)0x0004
/* SaHpiEventCategoryT == SAHPI_EC_STATE */
#define SAHPI_ES_STATE_DEASSERTED (SaHpiEventStateT)0x0001
#define SAHPI_ES_STATE_ASSERTED (SaHpiEventStateT)0x0002
/* SaHpiEventCategoryT == SAHPI_EC_PRED_FAIL */
#define SAHPI_ES_PRED_FAILURE_DEASSERT (SaHpiEventStateT)0x0001
#define SAHPI_ES_PRED_FAILURE_ASSERT (SaHpiEventStateT)0x0002
/* SaHpiEventCategoryT == SAHPI_EC_LIMIT */
#define SAHPI_ES_LIMIT_NOT_EXCEEDED (SaHpiEventStateT)0x0001
#define SAHPI_ES_LIMIT_EXCEEDED (SaHpiEventStateT)0x0002
/* SaHpiEventCategoryT == SAHPI_EC_PERFORMANCE */
#define SAHPI_ES_PERFORMANCE_MET (SaHpiEventStateT)0x0001
#define SAHPI_ES_PERFORMANCE_LAGS (SaHpiEventStateT)0x0002
/*
** SaHpiEventCategoryT == SAHPI_EC_SEVERITY
** When using these event states, the event state should match
** the event severity
*/
#define SAHPI_ES_OK (SaHpiEventStateT)0x0001
#define SAHPI_ES_MINOR_FROM_OK (SaHpiEventStateT)0x0002
#define SAHPI_ES_MAJOR_FROM_LESS (SaHpiEventStateT)0x0004
#define SAHPI_ES_CRITICAL_FROM_LESS (SaHpiEventStateT)0x0008
#define SAHPI_ES_MINOR_FROM_MORE (SaHpiEventStateT)0x0010
#define SAHPI_ES_MAJOR_FROM_CRITICAL (SaHpiEventStateT)0x0020
#define SAHPI_ES_CRITICAL (SaHpiEventStateT)0x0040
#define SAHPI_ES_MONITOR (SaHpiEventStateT)0x0080
#define SAHPI_ES_INFORMATIONAL (SaHpiEventStateT)0x0100
/* SaHpiEventCategoryT == SAHPI_EC_PRESENCE */
#define SAHPI_ES_ABSENT (SaHpiEventStateT)0x0001
#define SAHPI_ES_PRESENT (SaHpiEventStateT)0x0002
/* SaHpiEventCategoryT == SAHPI_EC_ENABLE */
#define SAHPI_ES_DISABLED (SaHpiEventStateT)0x0001
#define SAHPI_ES_ENABLED (SaHpiEventStateT)0x0002
/* SaHpiEventCategoryT == SAHPI_EC_AVAILABILITY */
#define SAHPI_ES_RUNNING (SaHpiEventStateT)0x0001
#define SAHPI_ES_TEST (SaHpiEventStateT)0x0002
#define SAHPI_ES_POWER_OFF (SaHpiEventStateT)0x0004
#define SAHPI_ES_ON_LINE (SaHpiEventStateT)0x0008
#define SAHPI_ES_OFF_LINE (SaHpiEventStateT)0x0010
#define SAHPI_ES_OFF_DUTY (SaHpiEventStateT)0x0020
#define SAHPI_ES_DEGRADED (SaHpiEventStateT)0x0040
#define SAHPI_ES_POWER_SAVE (SaHpiEventStateT)0x0080
#define SAHPI_ES_INSTALL_ERROR (SaHpiEventStateT)0x0100
/* SaHpiEventCategoryT == SAHPI_EC_REDUNDANCY */
#define SAHPI_ES_FULLY_REDUNDANT (SaHpiEventStateT)0x0001
#define SAHPI_ES_REDUNDANCY_LOST (SaHpiEventStateT)0x0002
#define SAHPI_ES_REDUNDANCY_DEGRADED (SaHpiEventStateT)0x0004
#define SAHPI_ES_REDUNDANCY_LOST_SUFFICIENT_RESOURCES \
(SaHpiEventStateT)0x0008
#define SAHPI_ES_NON_REDUNDANT_SUFFICIENT_RESOURCES \
(SaHpiEventStateT)0x0010
#define SAHPI_ES_NON_REDUNDANT_INSUFFICIENT_RESOURCES \
(SaHpiEventStateT)0x0020
#define SAHPI_ES_REDUNDANCY_DEGRADED_FROM_FULL (SaHpiEventStateT)0x0040
#define SAHPI_ES_REDUNDANCY_DEGRADED_FROM_NON (SaHpiEventStateT)0x0080
/*
** SaHpiEventCategoryT == SAHPI_EC_GENERIC || SAHPI_EC_USER
** These event states are defined by the OEM or the user of the
** implementation.
*/
#define SAHPI_ES_STATE_00 (SaHpiEventStateT)0x0001
#define SAHPI_ES_STATE_01 (SaHpiEventStateT)0x0002
#define SAHPI_ES_STATE_02 (SaHpiEventStateT)0x0004
#define SAHPI_ES_STATE_03 (SaHpiEventStateT)0x0008
#define SAHPI_ES_STATE_04 (SaHpiEventStateT)0x0010
#define SAHPI_ES_STATE_05 (SaHpiEventStateT)0x0020
#define SAHPI_ES_STATE_06 (SaHpiEventStateT)0x0040
#define SAHPI_ES_STATE_07 (SaHpiEventStateT)0x0080
#define SAHPI_ES_STATE_08 (SaHpiEventStateT)0x0100
#define SAHPI_ES_STATE_09 (SaHpiEventStateT)0x0200
#define SAHPI_ES_STATE_10 (SaHpiEventStateT)0x0400
#define SAHPI_ES_STATE_11 (SaHpiEventStateT)0x0800
#define SAHPI_ES_STATE_12 (SaHpiEventStateT)0x1000
#define SAHPI_ES_STATE_13 (SaHpiEventStateT)0x2000
#define SAHPI_ES_STATE_14 (SaHpiEventStateT)0x4000


#endif /* HPI_EVENT_H */

