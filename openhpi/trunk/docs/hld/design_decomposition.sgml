<!-- ...................................................................... -->
<!-- $Id$ ........................................ -->
<!-- 
        This material may be distributed only subject to the terms and 
        conditions set forth in the Open Publication License, v1.0 or later 
        (the latest version is currently available at 
        http://www.opencontent.org/openpub/).  Distribution of substantively 
        modified version of this document is prohibited without the explicit 
        permission of the copyright holder.

        Other company, product, or service names may be trademarks or service 
        marks of others.
-->

  <chapter>
    <title>Design Decomposition</title>
    <para>
     There are a few guiding principals behind 
the design and implementation of the OpenHPI project. To succeed, 
the project must be: 
    </para>
<itemizedlist mark='opencircle'>
      <listitem>
      <para>
<emphasis>Simple</emphasis> - the easier the code is to follow, the easier it is to find and fix bugs.
      </para>
      </listitem>
      <listitem>
      <para>
<emphasis>Lightweight</emphasis> - targets for the project range from large servers with 
lots of resources to embedded devices with minimal footprints. To that end, 
the implementation must not be reliant on a lot of external libraries. 
      </para>
      </listitem>
      <listitem>
      <para>
<emphasis>Efficient</emphasis> - this is both in terms of performance as well as code re-use. 
For performance, the reasons are obvious; you don't want your management layers 
to bring down the performance of your system. In regard to code re-use--the more 
that pieces of code can be re-used the faster that others can develop hardware 
specific components to sit within the OpenHPI domain. 
      </para>
      </listitem>
      </itemizedlist>
    <para>
    To meet the above requirements the design is broken down into four major areas. 
Each of these areas will eventually be defined in detail on subsequent pages. Brief 
descriptions are provided below.
    </para>
    <para>
<mediaobject>
  <imageobject>
        <imagedata fileref="hld_diagram.gif">
  </imageobject>
</mediaobject>
    </para>
    <section>
        <title>Application Interface Stubs</title>
        <para>This portion deals with the code that provides the entry points into 
the libhpi.so. Initially this will literally just contain stubs that provide 
API compliance without any features. Stub APIs will output to the stderr a 
TODO: Implement _api_ message. As the api is implemented, these output messages 
will be removed.
        </para>
    </section>
    <section>
        <title>Utility Functions</title>
        <para>The utility functions provide a lot of the reusable coding 
components such as lists, events, hash tables, etc. In addition, it provides 
general management and organizational functions for sessions, domains, entities,
 and resources. 
        </para>
    </section>
    <section>
        <title>Hardware Abstractions</title>
        <para>In order to be portable to various different hardware platforms 
there needs to be a standard set of calls to and from the hardware to the 
utility and application interface stub modules described above. This module 
represents that abstraction. An example of capability that this piece would 
enable is interfacing between the hardware enumneration and discovery to the 
above components. 
        </para>
    </section>
    <section>
        <title>Hardware Specific Components</title>
        <para>This is the meat of what enables an HPI implementation. This 
is the component that is custom built for each targetted hardware platform. 
At a minimum, the OpenHPI project will provide specific components for 
AdvancedTCA, CompactPCI, and a sample module for managing a traditional 
development machine. 
        </para>
    </section>
  </chapter>
